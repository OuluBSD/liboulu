#ifdef MICROCODE_INFO
MACH_NAME(Mark1)
#endif



#ifdef MICROCODE_HEADERS
MACH_BEGIN(Mark1)

INS_1(TST, CHAR)
INS  (ID)
INS  (NUM)
INS  (SR)
INS_1(CLL, ID)
INS  (R)
INS  (SET)
INS_1(B, ID)
INS_1(BT, ID)
INS_1(BF, ID)
INS  (BE)
INS_1(CL, CHAR)
INS  (CI)
INS  (GN1)
INS  (GN2)
INS  (LB)
INS  (OUT)
INS_1(ADR, ID)
INS  (END)

MACH_END
#endif



#ifdef MICROCODE_IMPL
MACH_BEGIN(Mark1)

// SET BRANCH FLAG, IF EXACT CHAR ARRAY MATCH
BEGIN_INS_1(0, TST, CHAR)
	INC(PC)
	COPY_CODE_U32(MICRO0)
	ADD_VALUE(PC, 4, PC)
	INPUT_SKIP_SPACE
	INPUT_ACCEPT_EXACT(MICRO0, BRANCH)
END_INS

// SET BRANCH FLAG, IF IDENTIFIER
BEGIN_INS(1, ID)
	INPUT_SKIP_SPACE
	INPUT_ACCEPT_ID(BRANCH)
	INC(PC)
END_INS

// SET BRANCH FLAG, IF NUMBER
BEGIN_INS(2, NUM)
	INPUT_SKIP_SPACE
	INPUT_ACCEPT_NUM(BRANCH)
	INC(PC)
END_INS

// SET BRANCH FLAG, IF STRING
BEGIN_INS(3, SR)
	INPUT_SKIP_SPACE
	INPUT_ACCEPT_CHARLIT(BRANCH)
	INC(PC)
END_INS

// CALL
BEGIN_INS_1(4, CLL, ID)
	//DUMP_CODE("CLL 0");
	INC(PC)
	COPY_CODE_U32(MICRO0)
	ADD_VALUE(PC, 4, PC)
	//DUMP_CODE("CLL 1");
	PUSH(PC)
	PUSH_VALUE(0)
	PUSH_VALUE(0)
	ASSIGN(MICRO0, PC);
	//DUMP_CODE("CLL 2");
END_INS

// RETURN
BEGIN_INS(5, R)
	IF_BEGIN(IS_STACK_EMPTY)
		HALT
	ELSE
		POP(PC)
		POP(PC)
		POP(PC)
	END_IF
END_INS

// SET BRANCH FLAG
BEGIN_INS(6, SET)
	SET_FLAG(BRANCH, 1)
	INC(PC)
END_INS

// BRANCH
BEGIN_INS_1(7, B, ID)
	INC(PC)
	COPY_CODE_U32(PC)
END_INS

// BRANCH IF TRUE
BEGIN_INS_1(8, BT, ID)
	IF_BEGIN(IS_FLAG(BRANCH))
		INC(PC)
		COPY_CODE_U32(PC)
	ELSE
		ADD_VALUE(PC, 5, PC) // 32bit
	END_IF
END_INS

// BRANCH IF FALSE
BEGIN_INS_1(9, BF, ID)
	IF_BEGIN(IS_NOT_FLAG(BRANCH))
		INC(PC)
		COPY_CODE_U32(PC)
	ELSE
		ADD_VALUE(PC, 5, PC) // 32bit
	END_IF
END_INS

// BRANCH TO ERROR IF FALSE
BEGIN_INS(10, BE)
	IF_BEGIN(IS_NOT_FLAG(BRANCH))
		SET_EXIT(1)
		HALT
	END_IF
	INC(PC)
END_INS

// COPY LITERAL
BEGIN_INS_1(11, CL, CHAR)
	INC(PC)
	COPY_CODE_U32(MICRO0)
	ADD_VALUE(PC, 4, PC) // 32bit
	OUT(MICRO0)
END_INS

// COPY INPUT
BEGIN_INS(12, CI)
	OUT_ACCEPTED
	INC(PC)
END_INS

// GENERATE 1
BEGIN_INS(13, GN1)
	POP(R2)
	POP(R1)
	CMP(R1, 0, MICRO0)
	//DUMP_CODE("GN1 0");
	IF_BEGIN(IS_NOT_FLAG(MICRO0))
		INC(R10)
		ASSIGN(R10, R1)
	END_IF
	PUSH(R1)
	PUSH(R2)
	//DUMP_CODE("GN1 1");
	OUT_STRING("A")
	OUT_INTSTR(R1)
	OUT_STRING(" ")
	INC(PC)
	//DUMP_CODE("GN1 2");
END_INS

// GENERATE 2
BEGIN_INS(14, GN2)
	POP(R2)
	CMP(R2, 0, MICRO0)
	IF_BEGIN(IS_NOT_FLAG(MICRO0))
		INC(R11)
		ASSIGN(R11, R2)
	END_IF
	PUSH(R2)
	OUT_STRING("B")
	OUT_INTSTR(R2)
	OUT_STRING(" ")
	INC(PC)
END_INS

// LABEL
BEGIN_INS(15, LB)
	OUT_INDENT(0)
	OUT_POST(":")
	INC(PC)
END_INS

// OUTPUT
BEGIN_INS(16, OUT)
	OUT_NL
	OUT_INDENT(1)
	OUT_POST(0)
	INC(PC)
END_INS

// ADDRESS
BEGIN_INS_1(17, ADR, ID)
	INC(PC)
	COPY_CODE_U32(PC)
END_INS

// END
BEGIN_INS(18, END)
	SET_EXIT(0)
	HALT
END_INS


MACH_END
#endif
