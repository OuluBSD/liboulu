#include "EcsLib.h"


NAMESPACE_UPP

using namespace TS::Ecs;





void RegisterCustomer(Ecs::DevCls dev) {
	TS::Ecs::Factory::RegisterComponent<Ecs::ExtComponent>(
		Ecs::SubCompCls::CUSTOMER,
		ValDevCls(dev, ValCls::RECEIPT),
		ValDevCls(dev, ValCls::ORDER),
		ValDevCls(dev, ValCls::ORDER));
}

void RegisterInput(Ecs::DevCls dev, Ecs::ValCls val) {
	TS::Ecs::Factory::RegisterComponent<Ecs::ExtComponent>(
		Ecs::SubCompCls::INPUT,
		ValDevCls(dev, ValCls::ORDER), //VD(CENTER,ORDER),
		ValDevCls(dev,val),
		ValDevCls(dev,val));
}

void RegisterOutput(Ecs::DevCls dev, Ecs::ValCls val) {
	TS::Ecs::Factory::RegisterComponent<Ecs::ExtComponent>(
		Ecs::SubCompCls::OUTPUT,
		ValDevCls(dev,val),
		ValDevCls(dev,val),
		ValDevCls(dev, ValCls::RECEIPT) //VD(CENTER,RECEIPT)
		);
}

void RegisterPipe(Ecs::DevCls dev, Ecs::ValCls val) {
	TS::Ecs::Factory::RegisterComponent<Ecs::ExtComponent>(
		Ecs::SubCompCls::PIPE,
		ValDevCls(dev,val),
		ValDevCls(dev,val),
		ValDevCls(dev,val));
}

void RegisterSideInput(Ecs::DevCls dev, Ecs::ValCls val) {
	TS::Ecs::Factory::RegisterComponent<Ecs::ExtComponent>(
		Ecs::SubCompCls::SIDE_INPUT,
		ValDevCls(dev, ValCls::ORDER), //VD(CENTER,ORDER),
		ValDevCls(dev,val),
		ValDevCls(dev,val));
}

void RegisterSideOutput(Ecs::DevCls dev, Ecs::ValCls val) {
	TS::Ecs::Factory::RegisterComponent<Ecs::ExtComponent>(
		Ecs::SubCompCls::SIDE_OUTPUT,
		ValDevCls(dev,val),
		ValDevCls(dev,val),
		ValDevCls(dev, ValCls::RECEIPT) //VD(CENTER,RECEIPT)
		);
}

void RegisterConverter(Ecs::DevCls dev, Ecs::ValCls from, Ecs::ValCls to) {
	TS::Ecs::Factory::RegisterComponent<Ecs::ExtComponent>(
		Ecs::SubCompCls::CONVERTER,
		ValDevCls(dev,from),
		ValDevCls(dev,to),
		ValDevCls(dev,to) //VD(CENTER,RECEIPT)
		);
}

#define TO_VAL(from, to) \
	CONV_VALVAL(from, to, CENTER) \
	CONV_VALVAL(from, to, ACCEL) \
	

#define FROM_VAL(from) \
	TO_VAL(from, AUDIO) \
	TO_VAL(from, VIDEO) \
	TO_VAL(from, MIDI) \


#define CONV_VAL_LIST \
	FROM_VAL(AUDIO) \
	FROM_VAL(VIDEO) \
	FROM_VAL(MIDI) \
	
	
INITBLOCK {
	
	//RegisterCustomer(DevCls::CENTER);
	
	#define DEV(x) RegisterCustomer(DevCls::x);
	DEV_LIST
	#undef DEV
	
	
	#define IFACE_CTX_CLS(dev, val, prefix) \
		RegisterInput(Ecs::DevCls::dev, Ecs::ValCls::val); \
		RegisterOutput(Ecs::DevCls::dev, Ecs::ValCls::val); \
		RegisterPipe(Ecs::DevCls::dev, Ecs::ValCls::val); \
		RegisterSideInput(Ecs::DevCls::dev, Ecs::ValCls::val); \
		RegisterSideOutput(Ecs::DevCls::dev, Ecs::ValCls::val);
	#define IFACE_CTX(value,	format,		sample) DEV_IFACE(value)
	IFACE_CTX_ORDER_LIST;
	#undef IFACE
	#undef IFACE_CTX_CLS
	
	
	#define CONV_VALVAL(fval, tval, dev) \
		if (ValCls::fval != ValCls::tval) \
			RegisterConverter(DevCls::dev, ValCls::fval, ValCls::tval);
	CONV_VAL_LIST
	
}

END_UPP_NAMESPACE
