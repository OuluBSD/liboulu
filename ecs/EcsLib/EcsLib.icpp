#include "EcsLib.h"


NAMESPACE_UPP

using namespace TS::Ecs;





void RegisterInput(Ecs::DevCls dev, Ecs::ValCls val) {
	TS::Ecs::Factory::RegisterComponent<Ecs::ExtComponent>(
		Ecs::SubCompCls::INPUT,
		VD(CENTER,ORDER),
		ValDevCls(dev,val),
		ValDevCls(dev,val));
}

void RegisterOutput(Ecs::DevCls dev, Ecs::ValCls val) {
	TS::Ecs::Factory::RegisterComponent<Ecs::ExtComponent>(
		Ecs::SubCompCls::OUTPUT,
		ValDevCls(dev,val),
		ValDevCls(dev,val),
		VD(CENTER,RECEIPT));
}

void RegisterPipe(Ecs::DevCls dev, Ecs::ValCls val) {
	TS::Ecs::Factory::RegisterComponent<Ecs::ExtComponent>(
		Ecs::SubCompCls::PIPE,
		ValDevCls(dev,val),
		ValDevCls(dev,val),
		ValDevCls(dev,val));
}

void RegisterSideInput(Ecs::DevCls dev, Ecs::ValCls val) {
	TS::Ecs::Factory::RegisterComponent<Ecs::ExtComponent>(
		Ecs::SubCompCls::SIDE_INPUT,
		VD(CENTER,ORDER),
		ValDevCls(dev,val),
		ValDevCls(dev,val));
}

void RegisterSideOutput(Ecs::DevCls dev, Ecs::ValCls val) {
	TS::Ecs::Factory::RegisterComponent<Ecs::ExtComponent>(
		Ecs::SubCompCls::SIDE_INPUT,
		ValDevCls(dev,val),
		ValDevCls(dev,val),
		VD(CENTER,RECEIPT));
}


INITBLOCK {
	
	#define IFACE_CTX_CLS(dev, val, prefix) \
		RegisterInput(Ecs::DevCls::dev, Ecs::ValCls::val); \
		RegisterOutput(Ecs::DevCls::dev, Ecs::ValCls::val); \
		RegisterPipe(Ecs::DevCls::dev, Ecs::ValCls::val); \
		RegisterSideInput(Ecs::DevCls::dev, Ecs::ValCls::val); \
		RegisterSideOutput(Ecs::DevCls::dev, Ecs::ValCls::val);
	#define IFACE_CTX(value,	format,		sample) DEV_IFACE(value)
	IFACE_CTX_ORDER_LIST;
	#undef IFACE
	#undef IFACE_CTX_CLS
	
}

END_UPP_NAMESPACE
